TITLE:: AllBuf
summary:: SynthDef factory producing buffer player synths for arbitrary amounts of input and output channels
categories:: Undocumented classes
related:: Classes/PlayBuf

DESCRIPTION::
AllBuf is a convenience class which produces all manners of SynthDefs for playing back buffers.

It makes sort of smart decisions about how to create patches based on your input parameters and it contains a method for factory producing all variations of SynthDefs for arbitrary input (number of channels in the buffer) and output channels.

It automatically creates variations of the SynthDefs containing pitch envelopes, low pass filter and filter envelopes which can all be easily used in patterns etc.

The idea is to create all possible SynthDefs using this class in one line of code: 

code::
// Create SynthDefs for playing back buffers of 1-32 channels panned in stereo
// Watch the post window for the names of the variations
AllBuf.addSynths(outchans: 2, maxchansIn: 32, verbose: true);
::

The naming convention is \buf[inchans]i[outchans]

And then if it is a variation containg a pitch envelope add "pe" to the end of the name. 
Eg "buf2i4pe" for a buffer player with 2 buffer channels and a pitch envelope panned in 4 output channels.

And then if it is a variation containg a filter add "lpf" to the end of the name
Eg "buf8i4lpf" for a buffer player with 8 buffer channels and a low pass filter panned in 4 output channels.

And then if it is a variation containg a filter envelope add "e" to the end of the name
Eg "buf2i2lpfe" for a buffer player with 2 buffer channels and a low pass filter with added envelope panned in 2 output channels.


CLASSMETHODS::

METHOD:: addSynth
Add one synth

ARGUMENT:: inchans
Number of buffer channels

ARGUMENT:: outchans
Number of output channels

ARGUMENT:: pitchEnv
Whether or not to add a pitch envelope to the patch

ARGUMENT:: lpf
Whether or not to add a filter to the patch

ARGUMENT:: filterEnv
Whether or not to add a filter envelope to the patch

ARGUMENT:: verbose
Whether or not to post useful information about the patches created

returns:: nil

METHOD:: addSynths
The main factory method. This produces all variations of a buffer player synth for a fixed amount of output channels and all input channels up to maxchansIn

ARGUMENT:: outchans
Number of output channels

ARGUMENT:: maxchansIn
Create buffer player synths for number of channels up to this number

ARGUMENT:: verbose
To post or not

returns:: nil

EXAMPLES::

code::

// Create SynthDefs for playing back buffers of 1-32 channels panned in stereo
// Watch the post window for the names of the variations
AllBuf.addSynths(outchans: 2, maxchansIn: 32, verbose: true);

// Browse the results in your SynthDef library
SynthDescLib.global.browse;

// Manually make a SynthDef
AllBuf.addSynth(inchans: 2, outchans: 2, pitchEnv: false, lpf: false, filterEnv: false, verbose: false);

// Load a sound
b = Buffer.read(s, Platform.resourceDir +/+ "sounds/a11wlk01.wav"); // remember to free the buffer later.

// See number of channels in buffer
b.numChannels;

// Play pattern with a bunch of random parameters 
(
 Pbind(
	 \instrument, \buf1i2pelpfe, 
	 \rate, Pwhite(0.01,4.0),
	 \dur, 0.25,
	 \sustain, 2,
	 \attack, Pwhite(0.0,1.0), 
	 \release, Pwhite(0.0,1.0), 
	 \penv, Pwhite(0.0,1.0), 
	 \fenv, Pwhite(0.0,1.0),
	 \pan, Pwhite(0.0,1.0),
	 \cutoff, Pwhite(40,20000),
	 ).play
)
::
