TITLE:: AllBuf
summary:: SynthDef factory producing buffer player synths for arbitrary amounts of input and output channels
categories:: Undocumented classes
related:: Classes/PlayBuf

DESCRIPTION::
AllBuf is a convenience class which produces all manners of SynthDefs for playing back buffers.

It makes sort of smart decisions about how to create patches based on your input parameters and it contains a method for factory producing all variations of SynthDefs for arbitrary input (number of channels in the buffer) and output channels.

It automatically creates variations of the SynthDefs containing pitch envelopes, low pass filter and filter envelopes which can all be easily used in patterns etc.

The idea is to create all possible SynthDefs using this class in one line of code: 

code::

// Create Buffer Player synths in variations for mono and stereo buffers, outputting to stereo
a = AllBuf.new(maxinchans: 2, outchans: 2);

~bufpath = Platform.resourceDir +/+ "sounds" +/+ "a11wlk01.wav";

b = Buffer.read(s, ~bufpath);

// Get synthdef name for mono buffer player, with filter and pitc h envelopes
~synthname = a.def(inchans: 1, filterenv: true, pitchenv: true);

// Play synth
~synth = Synth(~synthname, [\buffer, b, \rate, 0.95, \dur, 8])
 
::

CLASSMETHODS::

METHOD:: new
Create an instance of AllBuf

ARGUMENT:: maxinchans
Maximum number of buffer channels. 

This will create variations of synths with number of buffer channels up to and including this number

ARGUMENT:: outchans
Number of output channels

ARGUMENT:: verbose
Boolean. To post or not the info of the synth creation process.

returns:: An AllBuf

INSTANCEMETHODS::

METHOD:: def 
Get the synthdef name for a certain synth

returns: Symbol

ARGUMENT:: inchans
Number of buffer channels

ARGUMENT:: filterenv
Add filter envelope to synth

ARGUMENT:: pitchenv
Add pitch envelope to synth

EXAMPLES::

code::

// Create Buffer Player synths in variations for mono and stereo buffers, outputting to stereo
a = AllBuf.new(maxinchans: 2, outchans: 2);

// Load a sound
b = Buffer.read(s, Platform.resourceDir +/+ "sounds/a11wlk01.wav"); // remember to free the buffer later.

// See number of channels in buffer
b.numChannels;

// Play pattern with a bunch of random parameters 
(
 Pbind(
	 \instrument, a.def(inchans: 1, filterenv: true, pitchenv: true),	 
	 \rate, Pwhite(0.01,4.0),
	 \dur, 0.25,
	 \sustain, 2,
	 \attack, Pwhite(0.0,1.0), 
	 \release, Pwhite(0.0,1.0), 
	 \pitchenv, Pwhite(0.0,1.0), 
	 \filterenv, Pwhite(0.0,1.0),
	 \pan, Pwhite(0.0,1.0),
	 \cutoff, Pexprand(40.0,20000.0),
	 ).play
)
::
